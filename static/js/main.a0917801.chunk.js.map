{"version":3,"sources":["components/Logo.js","components/Header.js","components/ItemsList.js","components/MemoList.js","components/App.js","serviceWorker.js","index.js","logo.svg"],"names":["Logo","react_default","a","createElement","src","logo","className","alt","Header","ItemsList","this","props","items","map","item","key","id","text","Component","MemoList","_Component","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","console","log","target","value","setState","handleSubmit","preventDefault","newItem","Date","now","state","concat","inherits","createClass","ItemsList_ItemsList","onSubmit","type","onChange","length","App","components_Logo","components_Header","components_MemoList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOAUeA,EAPF,WACZ,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,WCA7BC,EAJA,WACd,OAAOP,EAAAC,EAAAC,cAAA,gCCDaM,mLAEnB,OAAOR,EAAAC,EAAAC,cAAA,UAAKO,KAAKC,MAAMC,MAAMC,IAAI,SAAAC,GAAI,OAAIb,EAAAC,EAAAC,cAAA,MAAIY,IAAKD,EAAKE,IAAKF,EAAKG,gBAF5BC,aCoCxBC,EAnCf,SAAAC,GACC,SAAAD,EAAYR,GAAO,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAZ,KAAAS,IAClBE,EAAAC,OAAAE,EAAA,EAAAF,CAAAZ,KAAAY,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAAhB,KAAMC,KAGPgB,aAAe,SAAAC,GACdC,QAAQC,IAAIF,EAAMG,OAAOC,OACzBX,EAAKY,SAAS,CAAEhB,KAAMW,EAAMG,OAAOC,SANjBX,EAQnBa,aAAe,SAAAN,GACdA,EAAMO,iBACNN,QAAQC,IAAI,aACZ,IAAMM,EAAU,CACfpB,GAAIqB,KAAKC,MACTrB,KAAMI,EAAKkB,MAAMtB,MAElBI,EAAKY,SAAS,SAAAM,GAAK,MAAK,CACvB3B,MAAO2B,EAAM3B,MAAM4B,OAAOJ,GAC1BnB,KAAM,OAfPI,EAAKkB,MAAQ,CAAEtB,KAAM,GAAIL,MAAO,IAFdS,EADpB,OAAAC,OAAAmB,EAAA,EAAAnB,CAAAH,EAAAC,GAAAE,OAAAoB,EAAA,EAAApB,CAAAH,EAAA,EAAAJ,IAAA,SAAAiB,MAAA,WAsBE,OACC/B,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAACwC,EAAD,CAAW/B,MAAOF,KAAK6B,MAAM3B,QAC7BX,EAAAC,EAAAC,cAAA,QAAMyC,SAAUlC,KAAKwB,cACpBjC,EAAAC,EAAAC,cAAA,SAAO0C,KAAK,OAAO7B,GAAG,WAAW8B,SAAUpC,KAAKiB,aAAcK,MAAOtB,KAAK6B,MAAMtB,OAChFhB,EAAAC,EAAAC,cAAA,sBAAcO,KAAK6B,MAAM3B,MAAMmC,OAAS,SA5B7C5B,EAAA,CAA8BD,aCiBf8B,0LAZb,OACC/C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACdL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cACjBL,EAAAC,EAAAC,cAAC8C,EAAD,MACAhD,EAAAC,EAAAC,cAAC+C,EAAD,MACAjD,EAAAC,EAAAC,cAACgD,EAAD,eAPajC,cCMEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.a0917801.chunk.js","sourcesContent":["import React from 'react';\nimport logo from '../logo.svg';\n\nconst Logo = () => {\n\treturn (\n\t\t<div>\n\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t</div>\n\t);\n};\nexport default Logo;\n","import React from 'react';\n\nconst Header = () => {\n\treturn <h1>My React ToDoList</h1>;\n};\n\nexport default Header;\n","import React, { Component } from 'react';\n\nexport default class ItemsList extends Component {\n\trender() {\n\t\treturn <ul>{this.props.items.map(item => <li key={item.id}>{item.text}</li>)}</ul>;\n\t}\n}\n","import React, { Component } from 'react';\nimport ItemsList from './ItemsList';\n\nexport class MemoList extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { text: '', items: [] };\n\t}\n\thandleChange = event => {\n\t\tconsole.log(event.target.value);\n\t\tthis.setState({ text: event.target.value });\n\t};\n\thandleSubmit = event => {\n\t\tevent.preventDefault();\n\t\tconsole.log('submittin');\n\t\tconst newItem = {\n\t\t\tid: Date.now(),\n\t\t\ttext: this.state.text\n\t\t};\n\t\tthis.setState(state => ({\n\t\t\titems: state.items.concat(newItem),\n\t\t\ttext: ''\n\t\t}));\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h3>My plan for today</h3>\n\t\t\t\t<ItemsList items={this.state.items} />\n\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t<input type=\"text\" id=\"listItem\" onChange={this.handleChange} value={this.state.text} />\n\t\t\t\t\t<button>Add #{this.state.items.length + 1}</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default MemoList;\n","import React, { Component } from 'react';\nimport Logo from './Logo';\nimport Header from './Header';\nimport MemoList from './MemoList';\nimport '../App.css';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<Logo />\n\t\t\t\t\t<Header />\n\t\t\t\t\t<MemoList />\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}